using Agata.Diagnostics;
using Agata.Twinkle;
using Agata.Twinkle.Renderers;
using Microsoft.MixedReality.Toolkit.UI;
using Microsoft.MixedReality.Toolkit.Utilities;
using System;
using UnityEngine;

namespace Agata.Twinkle.Unity.Renderers
{
    public class VisualManipulator : VisualRectangle, IVisualManipulator
    {
        public new static void LinkToVisualFactory()
        {
            VisualElementFactory.Instance.Add(typeof(LogicalManipulator), typeof(VisualManipulator));
        }

        public VisualManipulator(ILogicalElement logicalElement) : base(logicalElement)
        {
            // On ajoute au rectangle le manipulator
            this.objectManipulator =  this.rectangle.gameObject.AddComponent<ObjectManipulator>();

            this.objectManipulator.OnManipulationStarted.AddListener(this.OnManipulationStarted);
            this.objectManipulator.OnManipulationEnded.AddListener(this.OnManipulationEnded);
        }

        protected ObjectManipulator objectManipulator;

        public ManipulationTypes ManipulationType 
        {
            get
            {
                return (ManipulationTypes)(int)this.objectManipulator.ManipulationType;
            }

            set
            {
                this.objectManipulator.ManipulationType = (ManipulationHandFlags)(int)value;
            }
        }

        private void OnManipulationStarted(ManipulationEventData eventData)
        {
            PointerRouter.Instance.ExecutePointerEvent(eventData, LogicalElementHandledEvent.PointerPressed);
        }
        private void OnManipulationEnded(ManipulationEventData eventData)
        {
            //Log.WriteLine("OnManipulationEnded");
            PointerRouter.Instance.ExecutePointerEvent(eventData, LogicalElementHandledEvent.PointerReleased);
        }

        public void SetTarget(LogicalElement target)
        {
            Transform transform = null;

            if(target is LogicalWindow == false)
            {
                // si on ne vise pas une fenetre on va viser le RenderTransform car il n'est pas soumis au Layout (en cas de modification du Layout, Manipulator conservera sa position)
                ((VisualElement)target.VisualElement).EnsureRenderTransformExists();

                // fait pointer vers le RenderTransform et donc accessible via Translation
                transform = target.GetGameObject().transform.GetChild(0).transform;

                // normalement dans ce mode la rotation ne devrait pas être autorisé car la rotation doit s'effectuer sur un autre transform
            }
            else
            {
                // C'est un fenetre on passe en Absolute
                transform = target.GetGameObject().transform;
            }

            this.objectManipulator.HostTransform = transform;
        }

        public void AddConstraint(IVisualConstraint constraint)
        {
            constraint.OnAdd(this.LogicalElement);
        }

        public void RemoveConstraint(IVisualConstraint constraint)
        {
            constraint.OnRemove();
        }
    }
}
